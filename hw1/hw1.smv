MODULE main
 VAR
    semaphore   : boolean;
    proc1       : process task1(semaphore,x);
    proc2       : process task2(semaphore,x);
    proc3       : process task3(semaphore,x);
    x : 0 .. 200;
    
ASSIGN
    init(semaphore) := FALSE;
    init(x) := 0;

------------------------
MODULE task1(semaphore,x)
 VAR
    state : {idle, entering, critical, exiting};
ASSIGN
    init(state) := idle;
    next(state) :=
        case
            state = idle        : {idle, entering};
            state = entering    : critical;
            state = critical    : {critical, exiting};
            state = exiting     : idle;
            TRUE                : state;
        esac;
    next(x) :=
        case
            (state = critical) & (x <200)   : x+1;  
            TRUE                            : x;
        esac;
    next(semaphore) :=
        case
            state = entering    : TRUE;
            state = exiting     : FALSE;
            TRUE                : semaphore;
        esac;

-------------------------
MODULE task2(semaphore,x)
 VAR
    state : {idle, entering, critical, exiting};
ASSIGN
    init(state) := idle;
    next(state) :=
        case
            state = idle        : {idle, entering};
            state = entering    : critical;
            state = critical    : {critical, exiting};
            state = exiting     : idle;
            TRUE                : state;
        esac;
    next(x) :=
        case
            (state = critical) & (x >0)    : x + (-1);  
            TRUE                            : x;
        esac;
    next(semaphore) :=
        case
            state = entering    : TRUE;
            state = exiting     : FALSE;
            TRUE                : semaphore;
        esac;

-------------------------
MODULE task3(semaphore,x)
 VAR
    state : {idle, entering, critical, exiting};
ASSIGN
    init(state) := idle;
    next(state) :=
        case
            state = idle        : {idle, entering};
            state = entering    : critical;
            state = critical    : {critical, exiting};
            state = exiting     : idle;
            TRUE                : state;
        esac;
    next(x) :=
        case
            (state = critical) & (x = 200)  : 0;  
            TRUE                            : x;
        esac;
    next(semaphore) :=
        case
            state = entering    : TRUE;
            state = exiting     : FALSE;
            TRUE                : semaphore;
        esac;
        

FAIRNESS
    running
